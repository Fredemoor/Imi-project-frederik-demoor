// <auto-generated />
using System;
using Imi.Project.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Imi.Project.Api.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230102190825_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Animal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasMaxLength(20)
                        .HasColumnType("datetime2");

                    b.Property<Guid>("BreedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsFed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWalked")
                        .HasColumnType("bit");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BreedId");

                    b.HasIndex("LocationId");

                    b.HasIndex("MediaId")
                        .IsUnique();

                    b.ToTable("Animals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12af35b5-a7b3-4e3a-ab06-ffcc952ba742"),
                            BirthDate = new DateTime(2018, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BreedId = new Guid("1fc45bf0-f27d-4daf-9543-4ee985bef359"),
                            CreatedDate = new DateTime(2023, 1, 2, 19, 8, 25, 56, DateTimeKind.Utc).AddTicks(9207),
                            Description = "Zacht karaKter, redelijk schuw.",
                            Gender = 0,
                            IsFed = false,
                            IsWalked = false,
                            LocationId = new Guid("397e120c-b602-4d3c-942f-0e40fc3f5dc8"),
                            MediaId = new Guid("299438ff-fa52-49f4-a9d5-278460e77484"),
                            Name = "Chappie",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("decde536-e3a2-46ad-9392-4d030568e025"),
                            BirthDate = new DateTime(2018, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BreedId = new Guid("a19527f4-5630-4c81-b127-8bd76e5063db"),
                            CreatedDate = new DateTime(2023, 1, 2, 19, 8, 25, 56, DateTimeKind.Utc).AddTicks(9209),
                            Description = "Zeer energetisch karakter",
                            Gender = 1,
                            IsFed = false,
                            IsWalked = false,
                            LocationId = new Guid("5da3ce69-ea3c-4ce8-88de-391d803b6a76"),
                            MediaId = new Guid("67276207-3ea6-4249-aec3-e48a00c1630b"),
                            Name = "Ozzy",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e939ddf0-331f-499c-9e86-8d8feaee8526"),
                            BirthDate = new DateTime(2018, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BreedId = new Guid("a0a7ee73-9fa5-441e-a6ba-1e1c6195c38b"),
                            CreatedDate = new DateTime(2023, 1, 2, 19, 8, 25, 56, DateTimeKind.Utc).AddTicks(9211),
                            Description = "Niet voor beginnelingen, kan agressief zijn.",
                            Gender = 0,
                            IsFed = false,
                            IsWalked = false,
                            LocationId = new Guid("1a861a7c-ea87-4a29-9f2a-57d75cc5e643"),
                            MediaId = new Guid("ee7fe468-e7ae-4478-a797-dab258fa8053"),
                            Name = "Kiba",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1f07e57e-7c72-4322-86dc-60e3faa03cba"),
                            BirthDate = new DateTime(2018, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BreedId = new Guid("0b311f69-59ea-4600-b3ad-d537a61d9752"),
                            CreatedDate = new DateTime(2023, 1, 2, 19, 8, 25, 56, DateTimeKind.Utc).AddTicks(9212),
                            Description = "Speelse rakker, zeer energetisch.",
                            Gender = 0,
                            IsFed = false,
                            IsWalked = false,
                            LocationId = new Guid("c27bd595-3a25-4670-ae32-ac99717f59a7"),
                            MediaId = new Guid("7fe7642b-3496-4d51-9581-727cec5a54ec"),
                            Name = "Bobbie",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("eaeb8c3b-8f2d-4f0f-9c15-8110ae0c936c"),
                            BirthDate = new DateTime(2018, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BreedId = new Guid("e4669f7d-f1f9-4fc0-ba66-05385fe3540d"),
                            CreatedDate = new DateTime(2023, 1, 2, 19, 8, 25, 56, DateTimeKind.Utc).AddTicks(9214),
                            Description = "Niet voor beginnelingen, redelijk boosaardig.",
                            Gender = 0,
                            IsFed = false,
                            IsWalked = false,
                            LocationId = new Guid("fcaf1783-1efe-42e0-8a0a-dc3e7c28667e"),
                            MediaId = new Guid("a672c408-6e72-4028-8a09-a18145b92a62"),
                            Name = "Weppie",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("35eed6d6-cdac-4675-9d86-f0e4ffd5a6e4"),
                            BirthDate = new DateTime(2018, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BreedId = new Guid("25785be5-7771-4d26-9e48-71e93f09d01f"),
                            CreatedDate = new DateTime(2023, 1, 2, 19, 8, 25, 56, DateTimeKind.Utc).AddTicks(9215),
                            Description = "Goede familie hond, fan van water polo.",
                            Gender = 0,
                            IsFed = false,
                            IsWalked = false,
                            LocationId = new Guid("e57acf2c-dfd1-4d5e-95cb-e6ea97862522"),
                            MediaId = new Guid("76f18402-f0f1-47fa-8a8b-49aee69d15e1"),
                            Name = "Marco",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("75c80a76-49d1-4d66-b885-ec2dfd106844"),
                            BirthDate = new DateTime(2018, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BreedId = new Guid("d228b0cc-8fef-43da-a084-ee899e6ee763"),
                            CreatedDate = new DateTime(2023, 1, 2, 19, 8, 25, 56, DateTimeKind.Utc).AddTicks(9216),
                            Description = "Zacht karacter, redelijk schuw.",
                            Gender = 0,
                            IsFed = false,
                            IsWalked = false,
                            LocationId = new Guid("b8669444-c84f-47d0-bd21-b97470bfd05e"),
                            MediaId = new Guid("4384690b-3798-41d5-9b1d-26d4f9937759"),
                            Name = "Polo",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("fa069a42-993c-4a8f-b1e1-87b24cb25f8e"),
                            BirthDate = new DateTime(2018, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BreedId = new Guid("4ad42c96-00d6-4bfd-8cb4-6e674aa6eb52"),
                            CreatedDate = new DateTime(2023, 1, 2, 19, 8, 25, 56, DateTimeKind.Utc).AddTicks(9218),
                            Description = "Linda gaat graag zwemmen.",
                            Gender = 1,
                            IsFed = false,
                            IsWalked = false,
                            LocationId = new Guid("16610986-79f2-477d-bc39-e2fa61494e66"),
                            MediaId = new Guid("dc4ad261-5613-4a30-a582-678f908cd095"),
                            Name = "Linda",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("55fda0ff-7c42-4973-9f33-af3cdfb218d3"),
                            BirthDate = new DateTime(2018, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BreedId = new Guid("1f38cd5d-8d4d-4a5b-9272-6c27ad85744e"),
                            CreatedDate = new DateTime(2023, 1, 2, 19, 8, 25, 56, DateTimeKind.Utc).AddTicks(9219),
                            Description = "Zacht karacter, redelijk schuw.",
                            Gender = 1,
                            IsFed = false,
                            IsWalked = false,
                            LocationId = new Guid("344077d8-346d-4ba5-aa21-236061be3ebd"),
                            MediaId = new Guid("f729b55c-e2b0-48fe-a2cb-18220b3fa9b0"),
                            Name = "Cindy",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("208c0ca8-1e53-4a69-8171-6f067a704bdb"),
                            BirthDate = new DateTime(2018, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BreedId = new Guid("9221c836-84b3-4628-837e-b40641542e96"),
                            CreatedDate = new DateTime(2023, 1, 2, 19, 8, 25, 56, DateTimeKind.Utc).AddTicks(9220),
                            Description = "Zacht karacter, redelijk schuw.",
                            Gender = 0,
                            IsFed = false,
                            IsWalked = false,
                            LocationId = new Guid("7a34a55f-03f9-43d8-b8b5-aeb53873c07a"),
                            MediaId = new Guid("01ee01ce-0e13-4d86-a9b4-8735c826d3e7"),
                            Name = "Sjonnie",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("HasApprovedTermsAndConditions")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c858c98b-3c32-4c5d-a635-a26f42bbc177",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(2000, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "0f9ef293-1f10-4927-9feb-35e95a7123fc",
                            Email = "admin@imi.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@IMI.COM",
                            NormalizedUserName = "IMIADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAELzGjTtmNqXWy+ec6jhUv/QcS4oL6NlzIXo6M5VQsXpw94zjoZBNFipzPWtptyBRNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8f31e384-cd4b-44f7-b738-a201c871647e",
                            TwoFactorEnabled = false,
                            UserName = "ImiAdmin"
                        },
                        new
                        {
                            Id = "88b2b517-2b35-40d8-8377-513a3b7abd68",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1920, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "b680ff58-fa62-47cd-b4a1-f573ce877f67",
                            Email = "refuser@imi.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "REFUSER@IMI.COM",
                            NormalizedUserName = "IMIREFUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEHa2BQJ9AuFu62GvtiUJXfbVlM8U18mWOIkFk9MW6Q4Yyv9RcH1LhtPMuCRgFWNiEA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9e05cbdc-b722-413d-806c-1ff5dd305ae2",
                            TwoFactorEnabled = false,
                            UserName = "ImiRefuser"
                        },
                        new
                        {
                            Id = "85d6a8c4-eca7-4b1d-88b6-3459187bc55a",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1920, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "ca103527-9a0a-4930-a8f5-ab24faf6e25b",
                            Email = "user@imi.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@IMI.COM",
                            NormalizedUserName = "IMIUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEPhnhW3xEyuN+awEuni8S3jC3H5tjkkSKd9Q1oroU1f5yAkXVmk9z5t/gM/SMm7Ksg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3be7d480-12a2-49be-aedc-a16004f2259d",
                            TwoFactorEnabled = false,
                            UserName = "ImiUser"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Breed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnimalBreed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Breeds");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1fc45bf0-f27d-4daf-9543-4ee985bef359"),
                            AnimalBreed = "Podenco",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a19527f4-5630-4c81-b127-8bd76e5063db"),
                            AnimalBreed = "Pincher",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a0a7ee73-9fa5-441e-a6ba-1e1c6195c38b"),
                            AnimalBreed = "Labrador",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0b311f69-59ea-4600-b3ad-d537a61d9752"),
                            AnimalBreed = "Malteser",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e4669f7d-f1f9-4fc0-ba66-05385fe3540d"),
                            AnimalBreed = "Stafford",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("25785be5-7771-4d26-9e48-71e93f09d01f"),
                            AnimalBreed = "Australian Cattle dog",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d228b0cc-8fef-43da-a084-ee899e6ee763"),
                            AnimalBreed = "Akita",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4ad42c96-00d6-4bfd-8cb4-6e674aa6eb52"),
                            AnimalBreed = "AKita inu",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1f38cd5d-8d4d-4a5b-9272-6c27ad85744e"),
                            AnimalBreed = "Alaskan Malamute Dog",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9221c836-84b3-4628-837e-b40641542e96"),
                            AnimalBreed = "American Cocker Spaniel",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCleaned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFull")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("397e120c-b602-4d3c-942f-0e40fc3f5dc8"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = false,
                            IsFull = true,
                            Name = "Kennel 1",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5da3ce69-ea3c-4ce8-88de-391d803b6a76"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = false,
                            IsFull = true,
                            Name = "Kennel 2",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1a861a7c-ea87-4a29-9f2a-57d75cc5e643"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = false,
                            IsFull = true,
                            Name = "Kennel 3",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c27bd595-3a25-4670-ae32-ac99717f59a7"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = false,
                            IsFull = true,
                            Name = "Kennel 4",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("fcaf1783-1efe-42e0-8a0a-dc3e7c28667e"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = false,
                            IsFull = true,
                            Name = "Kennel 5",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e57acf2c-dfd1-4d5e-95cb-e6ea97862522"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = false,
                            IsFull = true,
                            Name = "Kennel 6",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b8669444-c84f-47d0-bd21-b97470bfd05e"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = false,
                            IsFull = true,
                            Name = "Kennel 7",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("16610986-79f2-477d-bc39-e2fa61494e66"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = false,
                            IsFull = true,
                            Name = "Kennel 8",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("344077d8-346d-4ba5-aa21-236061be3ebd"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = false,
                            IsFull = true,
                            Name = "Kennel 9",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7a34a55f-03f9-43d8-b8b5-aeb53873c07a"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = true,
                            IsFull = true,
                            Name = "Kennel 10",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e072526d-bc1c-413d-aaac-10beb42118d4"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = false,
                            IsFull = true,
                            Name = "Kennel 11",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("6b2846ac-8d70-439b-b557-5b5d7216908f"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = true,
                            IsFull = true,
                            Name = "Kennel 10",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Medias");

                    b.HasData(
                        new
                        {
                            Id = new Guid("299438ff-fa52-49f4-a9d5-278460e77484"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img0.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("67276207-3ea6-4249-aec3-e48a00c1630b"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img1.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ee7fe468-e7ae-4478-a797-dab258fa8053"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img2.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7fe7642b-3496-4d51-9581-727cec5a54ec"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img3.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a672c408-6e72-4028-8a09-a18145b92a62"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img4.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("76f18402-f0f1-47fa-8a8b-49aee69d15e1"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img5.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4384690b-3798-41d5-9b1d-26d4f9937759"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img6.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("dc4ad261-5613-4a30-a582-678f908cd095"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img7.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f729b55c-e2b0-48fe-a2cb-18220b3fa9b0"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img8.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("01ee01ce-0e13-4d86-a9b4-8735c826d3e7"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img9.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1938cc46-c18e-4018-afd8-cc175f02d7db"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img10.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d744dce4-e9cb-427e-b510-01853545ef4c"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img11.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "admin",
                            UserId = "c858c98b-3c32-4c5d-a635-a26f42bbc177"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "88b2b517-2b35-40d8-8377-513a3b7abd68"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "85d6a8c4-eca7-4b1d-88b6-3459187bc55a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Animal", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Breed", "Breed")
                        .WithMany("Animals")
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.Location", "Location")
                        .WithMany("Animals")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.Media", "Media")
                        .WithOne("Animal")
                        .HasForeignKey("Imi.Project.Api.Core.Entities.Animal", "MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breed");

                    b.Navigation("Location");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Breed", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Location", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Media", b =>
                {
                    b.Navigation("Animal");
                });
#pragma warning restore 612, 618
        }
    }
}
