// <auto-generated />
using System;
using Imi.Project.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Imi.Project.Api.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Animal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasMaxLength(20)
                        .HasColumnType("datetime2");

                    b.Property<Guid>("BreedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsFed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWalked")
                        .HasColumnType("bit");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BreedId");

                    b.HasIndex("LocationId");

                    b.HasIndex("MediaId")
                        .IsUnique();

                    b.ToTable("Animals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6dc7baf3-542f-4db1-854c-c0376d78b9c5"),
                            BirthDate = new DateTime(2018, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BreedId = new Guid("4470f516-05a0-4346-a9a7-d7bc67bf52b6"),
                            CreatedDate = new DateTime(2023, 1, 3, 17, 5, 9, 524, DateTimeKind.Utc).AddTicks(8406),
                            Description = "Zacht karaKter, redelijk schuw.",
                            Gender = 0,
                            IsFed = false,
                            IsWalked = false,
                            LocationId = new Guid("fbdefe0c-3337-43ca-bf88-d09cf2754278"),
                            MediaId = new Guid("7286d154-5451-4ede-b887-b97ace1e3e98"),
                            Name = "Chappie",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9ec560a7-f4fc-46c0-a95a-0b4c840687e0"),
                            BirthDate = new DateTime(2018, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BreedId = new Guid("ca91a793-78c3-466b-86e8-69bc76e476cc"),
                            CreatedDate = new DateTime(2023, 1, 3, 17, 5, 9, 524, DateTimeKind.Utc).AddTicks(8408),
                            Description = "Zeer energetisch karakter",
                            Gender = 1,
                            IsFed = false,
                            IsWalked = false,
                            LocationId = new Guid("9a88b9d4-5663-450d-9861-376c495beede"),
                            MediaId = new Guid("14de15d0-222e-4654-bc7a-76baec1d0845"),
                            Name = "Ozzy",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7dfc78ed-6a7b-4b16-bc1c-f59496e5ad32"),
                            BirthDate = new DateTime(2018, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BreedId = new Guid("d5dde7fe-b5f4-4e87-a93d-7b7c278e130f"),
                            CreatedDate = new DateTime(2023, 1, 3, 17, 5, 9, 524, DateTimeKind.Utc).AddTicks(8410),
                            Description = "Niet voor beginnelingen, kan agressief zijn.",
                            Gender = 0,
                            IsFed = false,
                            IsWalked = false,
                            LocationId = new Guid("2fc4eea1-7823-4ecc-b997-3ff9466ec2e1"),
                            MediaId = new Guid("d068101a-fd73-4dca-afc5-c19733f51cc6"),
                            Name = "Kiba",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("845e7f05-9dac-4cc5-98d3-333d985f756e"),
                            BirthDate = new DateTime(2018, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BreedId = new Guid("4a1a747f-d108-49c4-853d-c80a2c6a0eda"),
                            CreatedDate = new DateTime(2023, 1, 3, 17, 5, 9, 524, DateTimeKind.Utc).AddTicks(8412),
                            Description = "Speelse rakker, zeer energetisch.",
                            Gender = 0,
                            IsFed = false,
                            IsWalked = false,
                            LocationId = new Guid("98c7a8e4-4a53-42eb-b64e-cc4c4ba0df55"),
                            MediaId = new Guid("00472728-ad46-4494-8744-afe903eb7de8"),
                            Name = "Bobbie",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c8f91813-61d5-441d-b2ed-4e35c460222e"),
                            BirthDate = new DateTime(2018, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BreedId = new Guid("4b2866a2-a8e6-4fcb-9e39-6a0e95f9f17a"),
                            CreatedDate = new DateTime(2023, 1, 3, 17, 5, 9, 524, DateTimeKind.Utc).AddTicks(8414),
                            Description = "Niet voor beginnelingen, redelijk boosaardig.",
                            Gender = 0,
                            IsFed = false,
                            IsWalked = false,
                            LocationId = new Guid("0fa835d9-0785-4649-8f60-1d92ee2d306a"),
                            MediaId = new Guid("431d4af2-e9c8-4bfc-9e4c-51a1dbeb391c"),
                            Name = "Weppie",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("631ac7ea-7a95-4afb-86ba-2efccdebeb57"),
                            BirthDate = new DateTime(2018, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BreedId = new Guid("0b5e56aa-c6e5-46fe-8d4d-12eafd2be5f8"),
                            CreatedDate = new DateTime(2023, 1, 3, 17, 5, 9, 524, DateTimeKind.Utc).AddTicks(8415),
                            Description = "Goede familie hond, fan van water polo.",
                            Gender = 0,
                            IsFed = false,
                            IsWalked = false,
                            LocationId = new Guid("c692ba50-786e-401d-9b95-8fcc86c7cdd7"),
                            MediaId = new Guid("38fc9f67-f9b6-42e4-a8f8-fc46cfc4e445"),
                            Name = "Marco",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a6c14a8c-51b6-4d78-aa85-c7378fa4bd0e"),
                            BirthDate = new DateTime(2018, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BreedId = new Guid("d5d8bb93-c79f-42bc-b16d-516aeb2cc390"),
                            CreatedDate = new DateTime(2023, 1, 3, 17, 5, 9, 524, DateTimeKind.Utc).AddTicks(8416),
                            Description = "Zacht karacter, redelijk schuw.",
                            Gender = 0,
                            IsFed = false,
                            IsWalked = false,
                            LocationId = new Guid("9cfbb935-60e3-4532-895b-a3a5323838c5"),
                            MediaId = new Guid("3a376173-2eab-4bcf-97db-3ba9424ed87d"),
                            Name = "Polo",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("01d0ba40-e0b4-407a-a616-c60c4af1ad9e"),
                            BirthDate = new DateTime(2018, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BreedId = new Guid("38bade0d-f486-42b4-876f-0fbf20843ba5"),
                            CreatedDate = new DateTime(2023, 1, 3, 17, 5, 9, 524, DateTimeKind.Utc).AddTicks(8418),
                            Description = "Linda gaat graag zwemmen.",
                            Gender = 1,
                            IsFed = false,
                            IsWalked = false,
                            LocationId = new Guid("dd82cdf3-2c82-4f26-acbb-d097ab8356da"),
                            MediaId = new Guid("e975ab6d-ec68-4285-906c-95f41034db8a"),
                            Name = "Linda",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5611af77-2f53-4584-befe-8ce96f3c689e"),
                            BirthDate = new DateTime(2018, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BreedId = new Guid("7d478bc4-a4af-4037-b5de-a422d087410b"),
                            CreatedDate = new DateTime(2023, 1, 3, 17, 5, 9, 524, DateTimeKind.Utc).AddTicks(8419),
                            Description = "Zacht karacter, redelijk schuw.",
                            Gender = 1,
                            IsFed = false,
                            IsWalked = false,
                            LocationId = new Guid("343b6c45-2ce4-46e9-8f2a-472eb92d1619"),
                            MediaId = new Guid("2a0ea7af-7b51-4557-ba30-bb9736ad3483"),
                            Name = "Cindy",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2ecb504a-fa78-4f94-abaa-b5ac488969a4"),
                            BirthDate = new DateTime(2018, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BreedId = new Guid("80561590-eb0c-41e7-a1e7-1f856cd5e53a"),
                            CreatedDate = new DateTime(2023, 1, 3, 17, 5, 9, 524, DateTimeKind.Utc).AddTicks(8423),
                            Description = "Zacht karacter, redelijk schuw.",
                            Gender = 0,
                            IsFed = false,
                            IsWalked = false,
                            LocationId = new Guid("5b54ca57-a9a2-4a56-a77a-0b0ce3097c5c"),
                            MediaId = new Guid("5dd1a5c1-c1d7-4cdf-ad52-e1b999cfc612"),
                            Name = "Sjonnie",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("HasApprovedTermsAndConditions")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cc532db8-2d89-4ce2-9e56-c04266f676c2",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(2000, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "b08c66da-2437-4f93-bce4-8fcbd6776065",
                            Email = "admin@imi.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@IMI.COM",
                            NormalizedUserName = "IMIADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEKO7zJY3Hylj9pDz+h1u7eUwfT5inB2n3VT/rEnN4Ft8xv3lifbI3L9A5t31cZIcoA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0e0d7815-8aca-45ff-90b8-fa16da03120d",
                            TwoFactorEnabled = false,
                            UserName = "ImiAdmin"
                        },
                        new
                        {
                            Id = "383fb1a7-1d97-4852-a892-40d1b0870069",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1920, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c9535d24-67f5-4e04-8c7e-7de57c177fe8",
                            Email = "refuser@imi.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "REFUSER@IMI.COM",
                            NormalizedUserName = "IMIREFUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEIgvmZP9vgecDjw//kW85SQ2NMAFr31GRkM7Ec8Dz6MBlySNTA2+cq0mPKmneYL1HQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "93007535-a270-4e4c-b28b-689044cc446b",
                            TwoFactorEnabled = false,
                            UserName = "ImiRefuser"
                        },
                        new
                        {
                            Id = "8b1cfc27-21ae-4466-8045-c1e504ce2294",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1920, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "87a08750-4689-4c79-90e1-72e2c3456e38",
                            Email = "user@imi.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@IMI.COM",
                            NormalizedUserName = "IMIUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEMcplQPC/jcCTxuOrV/5k1maB+vPpwZhC7nDMKZ6AiEz3midPsNByyPZXjNeTOQo1w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5bbef44d-5a38-4014-9073-c51593d29a8b",
                            TwoFactorEnabled = false,
                            UserName = "ImiUser"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Breed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnimalBreed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Breeds");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4470f516-05a0-4346-a9a7-d7bc67bf52b6"),
                            AnimalBreed = "Podenco",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ca91a793-78c3-466b-86e8-69bc76e476cc"),
                            AnimalBreed = "Pincher",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d5dde7fe-b5f4-4e87-a93d-7b7c278e130f"),
                            AnimalBreed = "Labrador",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4a1a747f-d108-49c4-853d-c80a2c6a0eda"),
                            AnimalBreed = "Malteser",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4b2866a2-a8e6-4fcb-9e39-6a0e95f9f17a"),
                            AnimalBreed = "Stafford",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0b5e56aa-c6e5-46fe-8d4d-12eafd2be5f8"),
                            AnimalBreed = "Australian Cattle dog",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d5d8bb93-c79f-42bc-b16d-516aeb2cc390"),
                            AnimalBreed = "Akita",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("38bade0d-f486-42b4-876f-0fbf20843ba5"),
                            AnimalBreed = "AKita inu",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7d478bc4-a4af-4037-b5de-a422d087410b"),
                            AnimalBreed = "Alaskan Malamute Dog",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("80561590-eb0c-41e7-a1e7-1f856cd5e53a"),
                            AnimalBreed = "American Cocker Spaniel",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCleaned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFull")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fbdefe0c-3337-43ca-bf88-d09cf2754278"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = false,
                            IsFull = true,
                            Name = "Kennel 1",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9a88b9d4-5663-450d-9861-376c495beede"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = false,
                            IsFull = true,
                            Name = "Kennel 2",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2fc4eea1-7823-4ecc-b997-3ff9466ec2e1"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = false,
                            IsFull = true,
                            Name = "Kennel 3",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("98c7a8e4-4a53-42eb-b64e-cc4c4ba0df55"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = false,
                            IsFull = true,
                            Name = "Kennel 4",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0fa835d9-0785-4649-8f60-1d92ee2d306a"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = false,
                            IsFull = true,
                            Name = "Kennel 5",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c692ba50-786e-401d-9b95-8fcc86c7cdd7"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = false,
                            IsFull = true,
                            Name = "Kennel 6",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9cfbb935-60e3-4532-895b-a3a5323838c5"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = false,
                            IsFull = true,
                            Name = "Kennel 7",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("dd82cdf3-2c82-4f26-acbb-d097ab8356da"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = false,
                            IsFull = true,
                            Name = "Kennel 8",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("343b6c45-2ce4-46e9-8f2a-472eb92d1619"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = false,
                            IsFull = true,
                            Name = "Kennel 9",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5b54ca57-a9a2-4a56-a77a-0b0ce3097c5c"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = true,
                            IsFull = true,
                            Name = "Kennel 10",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1986688d-8824-4858-b9b0-8d99686ab758"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = false,
                            IsFull = true,
                            Name = "Kennel 11",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("41e706f0-a267-46f9-9b43-49ad99e028c9"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = true,
                            IsFull = true,
                            Name = "Kennel 10",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Medias");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7286d154-5451-4ede-b887-b97ace1e3e98"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img0.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("14de15d0-222e-4654-bc7a-76baec1d0845"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img1.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d068101a-fd73-4dca-afc5-c19733f51cc6"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img2.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("00472728-ad46-4494-8744-afe903eb7de8"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img3.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("431d4af2-e9c8-4bfc-9e4c-51a1dbeb391c"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img4.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("38fc9f67-f9b6-42e4-a8f8-fc46cfc4e445"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img5.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3a376173-2eab-4bcf-97db-3ba9424ed87d"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img6.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e975ab6d-ec68-4285-906c-95f41034db8a"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img7.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2a0ea7af-7b51-4557-ba30-bb9736ad3483"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img8.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5dd1a5c1-c1d7-4cdf-ad52-e1b999cfc612"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img9.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1393edac-22ed-4c9a-b287-49c00ccc8452"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img10.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("51fa54b5-25e3-4758-ae2a-82aac9e7de2d"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img11.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "admin",
                            UserId = "cc532db8-2d89-4ce2-9e56-c04266f676c2"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "383fb1a7-1d97-4852-a892-40d1b0870069"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "8b1cfc27-21ae-4466-8045-c1e504ce2294"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Animal", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Breed", "Breed")
                        .WithMany("Animals")
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.Location", "Location")
                        .WithMany("Animals")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.Media", "Media")
                        .WithOne("Animal")
                        .HasForeignKey("Imi.Project.Api.Core.Entities.Animal", "MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breed");

                    b.Navigation("Location");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Breed", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Location", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Media", b =>
                {
                    b.Navigation("Animal");
                });
#pragma warning restore 612, 618
        }
    }
}
