// <auto-generated />
using System;
using Imi.Project.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Imi.Project.Api.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Animal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasMaxLength(20)
                        .HasColumnType("datetime2");

                    b.Property<Guid>("BreedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsFed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWalked")
                        .HasColumnType("bit");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BreedId");

                    b.HasIndex("LocationId");

                    b.HasIndex("MediaId")
                        .IsUnique();

                    b.ToTable("Animals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5b1c6796-3bc1-4550-825e-c23801cadd5a"),
                            BirthDate = new DateTime(2018, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BreedId = new Guid("5d999ad1-7f11-4bca-adea-73378a502efb"),
                            CreatedDate = new DateTime(2023, 8, 9, 18, 27, 26, 413, DateTimeKind.Utc).AddTicks(8514),
                            Description = "Zacht karaKter, redelijk schuw.",
                            Gender = 0,
                            IsFed = false,
                            IsWalked = false,
                            LocationId = new Guid("69cf1dbc-ebd4-417d-8020-ef70d1e70d6d"),
                            MediaId = new Guid("41fa19a8-b036-4eee-952f-7bb4cd0fed75"),
                            Name = "Chappie",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5f52cbfb-28da-4d9d-b0ed-0a368c2dfa4c"),
                            BirthDate = new DateTime(2018, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BreedId = new Guid("4042efe6-dbe4-4b05-bb1a-72ca5b1916de"),
                            CreatedDate = new DateTime(2023, 8, 9, 18, 27, 26, 413, DateTimeKind.Utc).AddTicks(8517),
                            Description = "Zeer energetisch karakter",
                            Gender = 1,
                            IsFed = false,
                            IsWalked = false,
                            LocationId = new Guid("65d950f1-6cd6-4460-9957-15ea6b843a38"),
                            MediaId = new Guid("e6c318d7-a7ce-4761-9d71-2b223ce19ff7"),
                            Name = "Ozzy",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("eb41b5cb-86d3-47e9-ba13-8a65b6e4768a"),
                            BirthDate = new DateTime(2018, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BreedId = new Guid("e23584f4-f376-4140-bf27-067b9e36f0c7"),
                            CreatedDate = new DateTime(2023, 8, 9, 18, 27, 26, 413, DateTimeKind.Utc).AddTicks(8518),
                            Description = "Niet voor beginnelingen, kan agressief zijn.",
                            Gender = 0,
                            IsFed = false,
                            IsWalked = false,
                            LocationId = new Guid("35e287bc-4d6f-4aeb-8de3-ae236ead640c"),
                            MediaId = new Guid("9765dc63-3f5e-42f3-bf2c-32a30e09b6d0"),
                            Name = "Kiba",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9285b7c5-156d-4613-96a0-a3df74e13c17"),
                            BirthDate = new DateTime(2018, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BreedId = new Guid("2bc90b7f-3008-4cf6-a3fa-a8423dc31eb9"),
                            CreatedDate = new DateTime(2023, 8, 9, 18, 27, 26, 413, DateTimeKind.Utc).AddTicks(8519),
                            Description = "Speelse rakker, zeer energetisch.",
                            Gender = 0,
                            IsFed = false,
                            IsWalked = false,
                            LocationId = new Guid("6897f7fc-4228-4b10-b993-655c6a4a7ce4"),
                            MediaId = new Guid("a24b8b64-777b-41e5-bc47-744408f089ee"),
                            Name = "Bobbie",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8c13dd88-0087-42af-8487-e6986aeea18f"),
                            BirthDate = new DateTime(2018, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BreedId = new Guid("d553c237-b6cc-4d60-987f-7b885da10cd7"),
                            CreatedDate = new DateTime(2023, 8, 9, 18, 27, 26, 413, DateTimeKind.Utc).AddTicks(8521),
                            Description = "Niet voor beginnelingen, redelijk boosaardig.",
                            Gender = 0,
                            IsFed = false,
                            IsWalked = false,
                            LocationId = new Guid("d146632a-4b3b-43cb-8fdc-0b72dbb45e6a"),
                            MediaId = new Guid("7ab4a128-f9fe-44f9-8cf8-8b1b0a29b534"),
                            Name = "Weppie",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1eff255a-f8fd-44ad-8d6b-f46ab3289a15"),
                            BirthDate = new DateTime(2018, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BreedId = new Guid("2e3b3f9f-58b4-480d-ad90-8bbdbe308b64"),
                            CreatedDate = new DateTime(2023, 8, 9, 18, 27, 26, 413, DateTimeKind.Utc).AddTicks(8522),
                            Description = "Goede familie hond, fan van water polo.",
                            Gender = 0,
                            IsFed = false,
                            IsWalked = false,
                            LocationId = new Guid("fa7b93d7-ee95-4626-ad1f-a3dc4836ebc8"),
                            MediaId = new Guid("9a4ed161-ceaf-49b0-94da-3a04dc688397"),
                            Name = "Marco",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3a49b356-1e89-4a22-8c3e-e43a428b2936"),
                            BirthDate = new DateTime(2018, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BreedId = new Guid("1440967a-0fe8-43d5-9ae6-761e71a0dfaa"),
                            CreatedDate = new DateTime(2023, 8, 9, 18, 27, 26, 413, DateTimeKind.Utc).AddTicks(8523),
                            Description = "Zacht karacter, redelijk schuw.",
                            Gender = 0,
                            IsFed = false,
                            IsWalked = false,
                            LocationId = new Guid("9eeae77f-fd48-46b6-a0ba-8a31c3195d85"),
                            MediaId = new Guid("cdd7f0a3-b263-4d06-aff4-c6167573a6d4"),
                            Name = "Polo",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("53b9b7eb-c9e4-41d8-b2ce-62f53b0e9924"),
                            BirthDate = new DateTime(2018, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BreedId = new Guid("2f37041c-8434-45ca-acdc-2ec76cf15ae2"),
                            CreatedDate = new DateTime(2023, 8, 9, 18, 27, 26, 413, DateTimeKind.Utc).AddTicks(8524),
                            Description = "Linda gaat graag zwemmen.",
                            Gender = 1,
                            IsFed = false,
                            IsWalked = false,
                            LocationId = new Guid("9973c768-55be-4f34-b228-879af122d1ff"),
                            MediaId = new Guid("23c7d1dc-010b-404b-ac38-b45a9a22f692"),
                            Name = "Linda",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("390d06b9-909c-49df-87d8-49a97524db51"),
                            BirthDate = new DateTime(2018, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BreedId = new Guid("06f091ef-2d9d-4550-9d38-d30fa74fde87"),
                            CreatedDate = new DateTime(2023, 8, 9, 18, 27, 26, 413, DateTimeKind.Utc).AddTicks(8526),
                            Description = "Zacht karacter, redelijk schuw.",
                            Gender = 1,
                            IsFed = false,
                            IsWalked = false,
                            LocationId = new Guid("31edb7e4-ee92-4c00-825e-4962f9dd0ff6"),
                            MediaId = new Guid("cfb56d2c-cdbb-4d85-aa0a-f1d5b64c9b48"),
                            Name = "Cindy",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("266644c1-f61c-48b9-bb15-a917e8ec5e52"),
                            BirthDate = new DateTime(2018, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BreedId = new Guid("28f8a3cf-d545-42df-b2da-0a9c1beccdb4"),
                            CreatedDate = new DateTime(2023, 8, 9, 18, 27, 26, 413, DateTimeKind.Utc).AddTicks(8527),
                            Description = "Zacht karacter, redelijk schuw.",
                            Gender = 0,
                            IsFed = false,
                            IsWalked = false,
                            LocationId = new Guid("cb58933e-ad80-49e0-889b-a48206e40fb5"),
                            MediaId = new Guid("52bf9c1b-3e81-41ed-ac21-27a13219d974"),
                            Name = "Sjonnie",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("HasApprovedTermsAndConditions")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbd73b05-0a3b-46e9-a4bc-52dbb267993c",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(2000, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c224316e-3b18-4643-a30f-9e3445966435",
                            Email = "admin@imi.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@IMI.COM",
                            NormalizedUserName = "IMIADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEEqbSFHZ1rikQSE3cCcaIkW+BE0qcBaiqA8CRPgMh8rJV3oU+SXEJVQ2GCiJztOP6g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e449b2c5-d2bc-461a-ada8-c46293222256",
                            TwoFactorEnabled = false,
                            UserName = "ImiAdmin"
                        },
                        new
                        {
                            Id = "1ff2bcf5-69ad-4f7c-ac1f-1a65718430be",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1920, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "10aa3635-04da-4a7d-b058-cadf7eae46a1",
                            Email = "refuser@imi.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "REFUSER@IMI.COM",
                            NormalizedUserName = "IMIREFUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEAlvlwXeBstmbyQ/+chzd3tE5CJH6xmzYgt+i5uP9CRxTsKN8r2ioUNS5np38UlJ3w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "04e69a51-9771-4353-83c6-dc2b36759c31",
                            TwoFactorEnabled = false,
                            UserName = "ImiRefuser"
                        },
                        new
                        {
                            Id = "ad73bed5-e0ba-4680-a6e1-c1a6be5fbb0d",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1920, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "6ae4a956-3072-42e5-8361-b60d7d462ad9",
                            Email = "user@imi.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@IMI.COM",
                            NormalizedUserName = "IMIUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAENLBrFWQ24hUIs5S8SlDDypqaCodnoLTQYlKMXrhp8GXrhoLVQtQuuQEypg2YxW2Mw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0552d9d2-43df-42ac-a611-68579a09efc3",
                            TwoFactorEnabled = false,
                            UserName = "ImiUser"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Breed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnimalBreed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Breeds");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5d999ad1-7f11-4bca-adea-73378a502efb"),
                            AnimalBreed = "Podenco",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4042efe6-dbe4-4b05-bb1a-72ca5b1916de"),
                            AnimalBreed = "Pincher",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e23584f4-f376-4140-bf27-067b9e36f0c7"),
                            AnimalBreed = "Labrador",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2bc90b7f-3008-4cf6-a3fa-a8423dc31eb9"),
                            AnimalBreed = "Malteser",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d553c237-b6cc-4d60-987f-7b885da10cd7"),
                            AnimalBreed = "Stafford",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2e3b3f9f-58b4-480d-ad90-8bbdbe308b64"),
                            AnimalBreed = "Australian Cattle dog",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1440967a-0fe8-43d5-9ae6-761e71a0dfaa"),
                            AnimalBreed = "Akita",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2f37041c-8434-45ca-acdc-2ec76cf15ae2"),
                            AnimalBreed = "AKita inu",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("06f091ef-2d9d-4550-9d38-d30fa74fde87"),
                            AnimalBreed = "Alaskan Malamute Dog",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("28f8a3cf-d545-42df-b2da-0a9c1beccdb4"),
                            AnimalBreed = "American Cocker Spaniel",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCleaned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFull")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("69cf1dbc-ebd4-417d-8020-ef70d1e70d6d"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = false,
                            IsFull = true,
                            Name = "Kennel 1",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("65d950f1-6cd6-4460-9957-15ea6b843a38"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = false,
                            IsFull = true,
                            Name = "Kennel 2",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("35e287bc-4d6f-4aeb-8de3-ae236ead640c"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = false,
                            IsFull = true,
                            Name = "Kennel 3",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("6897f7fc-4228-4b10-b993-655c6a4a7ce4"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = false,
                            IsFull = true,
                            Name = "Kennel 4",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d146632a-4b3b-43cb-8fdc-0b72dbb45e6a"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = false,
                            IsFull = true,
                            Name = "Kennel 5",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("fa7b93d7-ee95-4626-ad1f-a3dc4836ebc8"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = false,
                            IsFull = true,
                            Name = "Kennel 6",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9eeae77f-fd48-46b6-a0ba-8a31c3195d85"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = false,
                            IsFull = true,
                            Name = "Kennel 7",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9973c768-55be-4f34-b228-879af122d1ff"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = false,
                            IsFull = true,
                            Name = "Kennel 8",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("31edb7e4-ee92-4c00-825e-4962f9dd0ff6"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = false,
                            IsFull = true,
                            Name = "Kennel 9",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("cb58933e-ad80-49e0-889b-a48206e40fb5"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = true,
                            IsFull = true,
                            Name = "Kennel 10",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("dfc3edaa-19be-409b-b742-5b2a01aea10c"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = false,
                            IsFull = true,
                            Name = "Kennel 11",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b5bddd4e-b1ac-4f3c-83eb-72c1ca9487a9"),
                            Capacity = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCleaned = true,
                            IsFull = true,
                            Name = "Kennel 10",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Medias");

                    b.HasData(
                        new
                        {
                            Id = new Guid("41fa19a8-b036-4eee-952f-7bb4cd0fed75"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img0.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e6c318d7-a7ce-4761-9d71-2b223ce19ff7"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img1.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9765dc63-3f5e-42f3-bf2c-32a30e09b6d0"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img2.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a24b8b64-777b-41e5-bc47-744408f089ee"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img3.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7ab4a128-f9fe-44f9-8cf8-8b1b0a29b534"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img4.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9a4ed161-ceaf-49b0-94da-3a04dc688397"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img5.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("cdd7f0a3-b263-4d06-aff4-c6167573a6d4"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img6.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("23c7d1dc-010b-404b-ac38-b45a9a22f692"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img7.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("cfb56d2c-cdbb-4d85-aa0a-f1d5b64c9b48"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img8.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("52bf9c1b-3e81-41ed-ac21-27a13219d974"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img9.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("6ef10476-8a4b-48ae-a8b7-c607156ded86"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img10.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1f585cbf-c773-4ec7-9786-09bb574e1845"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Img/img11.png",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "admin",
                            UserId = "dbd73b05-0a3b-46e9-a4bc-52dbb267993c"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "1ff2bcf5-69ad-4f7c-ac1f-1a65718430be"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "ad73bed5-e0ba-4680-a6e1-c1a6be5fbb0d"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Animal", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Breed", "Breed")
                        .WithMany("Animals")
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.Location", "Location")
                        .WithMany("Animals")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.Media", "Media")
                        .WithOne("Animal")
                        .HasForeignKey("Imi.Project.Api.Core.Entities.Animal", "MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breed");

                    b.Navigation("Location");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Breed", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Location", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Media", b =>
                {
                    b.Navigation("Animal");
                });
#pragma warning restore 612, 618
        }
    }
}
